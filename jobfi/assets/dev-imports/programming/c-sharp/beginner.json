[
    {
        "category": {
            "name": "Programming",
            "slug": "programming",
            "description": "Learn programming languages, algorithms, and software development skills.",
            "image": "https://raw.githubusercontent.com/zeynexa/jf2bucket/refs/heads/main/uploads/practice-categories/programming.svg"
        },
        "sub_categories": [
            {
                "name": "C#",
                "slug": "c-sharp",
                "description": "Learn C# for .NET development, Windows applications, and enterprise software.",
                "image": "https://raw.githubusercontent.com/zeynexa/jf2bucket/refs/heads/main/uploads/practice-sub-categories/c-sharp.svg",
                "exercises": [
                    {
                        "level": "Beginner",
                        "title": "C# Basic Syntax",
                        "description": "Learn C# basic syntax, variables, data types, and console applications.",
                        "tags": [
                            "syntax",
                            "c-sharp",
                            "basics"
                        ],
                        "tasks": [
                            {
                                "type": "Coding",
                                "title": "Hello World Program",
                                "question": "<p>Write a C# program that prints \"Hello, World!\" to the console.</p><p>Your program should:</p><ul><li>Use <code>using System;</code> directive</li><li>Create a <code>class</code> with a <code>Main</code> method</li><li>Use <code>Console.WriteLine()</code> for output</li><li>Return 0 from the Main method</li><li>Print the required message</li></ul>",
                                "hint": "Use using System; and Console.WriteLine()",
                                "input": "",
                                "output": "Hello, World!"
                            },
                            {
                                "type": "MCQ",
                                "title": "C# Program Structure",
                                "question": "<p>What is the basic structure of a C# program?</p><p>Consider these components:</p><ul><li><code>using</code> directives for namespaces</li><li><code>namespace</code> declaration</li><li><code>class</code> with <code>Main</code> method</li><li>Program statements</li></ul>",
                                "hint": "Consider the essential components of a C# program",
                                "options": [
                                    "Using directives, namespace, class with Main method, and program statements",
                                    "Only class with Main method and program statements",
                                    "Only using directives and program statements",
                                    "Only namespace and program statements"
                                ],
                                "correct_answer": 0
                            },
                            {
                                "type": "Coding",
                                "title": "Variable Declarations",
                                "question": "<p>Write a C# program that declares and initializes different types of variables.</p><p>Your program should:</p><ul><li>Declare an <code>int</code> variable for age</li><li>Declare a <code>double</code> variable for height</li><li>Declare a <code>string</code> variable for name</li><li>Declare a <code>bool</code> variable for isStudent</li><li>Print all variables</li></ul>",
                                "hint": "Use int, double, string, and bool data types",
                                "input": "25\n5.8\nJohn Doe\ntrue",
                                "output": "Name: John Doe\nAge: 25\nHeight: 5.8\nIs Student: True"
                            },
                            {
                                "type": "MCQ",
                                "title": "Data Types",
                                "question": "<p>Which of the following is a reference type in C#?</p><p>Consider these C# data types:</p><ul><li><code>int</code> - value type</li><li><code>double</code> - value type</li><li><code>string</code> - reference type</li><li><code>bool</code> - value type</li></ul>",
                                "hint": "Consider value types vs reference types",
                                "options": [
                                    "int - value type",
                                    "double - value type",
                                    "string - reference type",
                                    "bool - value type"
                                ],
                                "correct_answer": 2
                            },
                            {
                                "type": "Coding",
                                "title": "Input Operations",
                                "question": "<p>Write a C# program that reads input from the user.</p><p>Your program should:</p><ul><li>Use <code>Console.ReadLine()</code> for string input</li><li>Use <code>Convert.ToInt32()</code> for integer conversion</li><li>Use <code>Convert.ToDouble()</code> for double conversion</li><li>Handle input properly</li><li>Display the input values</li></ul>",
                                "hint": "Use Console.ReadLine() and Convert methods",
                                "input": "Alice\n25\n3.14",
                                "output": "Name: Alice\nAge: 25\nValue: 3.14"
                            },
                            {
                                "type": "MCQ",
                                "title": "String Interpolation",
                                "question": "<p>What is string interpolation in C#?</p><p>Consider this example:</p><pre><code>string name = \"John\";<br>int age = 25;<br>string message = $\"Name: {name}, Age: {age}\";</code></pre>",
                                "hint": "Consider the $ symbol and curly braces",
                                "options": [
                                    "Using $ symbol to embed expressions in strings - {expression}",
                                    "Using + operator to concatenate strings",
                                    "Using string.Format() method",
                                    "Using StringBuilder class"
                                ],
                                "correct_answer": 0
                            },
                            {
                                "type": "Coding",
                                "title": "Arithmetic Operations",
                                "question": "<p>Write a C# program that performs basic arithmetic operations.</p><p>Your program should:</p><ul><li>Declare two integer variables</li><li>Perform addition, subtraction, multiplication, and division</li><li>Use the modulo operator <code>%</code></li><li>Print all results</li><li>Handle the operations properly</li></ul>",
                                "hint": "Use +, -, *, /, % operators for arithmetic",
                                "input": "10\n3",
                                "output": "Addition: 13\nSubtraction: 7\nMultiplication: 30\nDivision: 3\nModulo: 1"
                            },
                            {
                                "type": "MCQ",
                                "title": "Operator Precedence",
                                "question": "<p>What is the result of <code>2 + 3 * 4</code> in C#?</p><p>Consider operator precedence:</p><ul><li>Multiplication and division have higher precedence than addition and subtraction</li><li>Operators with same precedence are evaluated left to right</li><li>Parentheses can override precedence</li></ul>",
                                "hint": "Consider which operation is performed first",
                                "options": [
                                    "20 - addition is performed first",
                                    "14 - multiplication is performed first",
                                    "24 - all operations are performed left to right",
                                    "Error - invalid expression"
                                ],
                                "correct_answer": 1
                            },
                            {
                                "type": "Coding",
                                "title": "Type Conversion",
                                "question": "<p>Write a C# program that demonstrates type conversion (casting).</p><p>Your program should:</p><ul><li>Declare variables of different types</li><li>Use explicit casting with <code>(type)</code> syntax</li><li>Use implicit conversion</li><li>Demonstrate both types of conversion</li><li>Print the conversion results</li></ul>",
                                "hint": "Use (int), (double) for explicit casting",
                                "input": "3.14\n42",
                                "output": "Double: 3.14\nCasted to int: 3\nInt: 42\nCasted to double: 42"
                            },
                            {
                                "type": "MCQ",
                                "title": "Constants",
                                "question": "<p>How do you declare a constant in C#?</p><p>Consider these methods:</p><ul><li><code>const int MAX_SIZE = 100;</code> - compile-time constant</li><li><code>readonly int MAX_SIZE = 100;</code> - runtime constant</li><li><code>static readonly int MAX_SIZE = 100;</code> - static readonly</li></ul>",
                                "hint": "Consider compile-time vs runtime constants",
                                "options": [
                                    "Using const keyword - const type name = value",
                                    "Using var keyword - var type name = value",
                                    "Using let keyword - let type name = value",
                                    "Using final keyword - final type name = value"
                                ],
                                "correct_answer": 0
                            }
                        ]
                    },
                    {
                        "level": "Beginner",
                        "title": "C# Control Flow",
                        "description": "Learn conditional statements and loops in C#.",
                        "tags": [
                            "control-flow",
                            "c-sharp",
                            "basics"
                        ],
                        "tasks": [
                            {
                                "type": "Coding",
                                "title": "If Statement",
                                "question": "<p>Write a C# program that uses an if statement to check if a number is positive.</p><p>Your program should:</p><ul><li>Declare an integer variable</li><li>Use <code>if</code> statement with condition</li><li>Use <code>else</code> clause for negative case</li><li>Print appropriate messages</li><li>Handle the conditional logic properly</li></ul>",
                                "hint": "Use if-else statement with comparison operator",
                                "input": "5",
                                "output": "Positive"
                            },
                            {
                                "type": "MCQ",
                                "title": "Comparison Operators",
                                "question": "<p>Which comparison operator checks for equality in C#?</p><p>Consider these operators:</p><ul><li><code>==</code> - equality operator</li><li><code>=</code> - assignment operator</li><li><code>!=</code> - inequality operator</li><li><code>===</code> - not valid in C#</li></ul>",
                                "hint": "Consider equality vs assignment",
                                "options": [
                                    "= - assignment operator",
                                    "== - equality operator",
                                    "=== - strict equality operator",
                                    "!= - inequality operator"
                                ],
                                "correct_answer": 1
                            },
                            {
                                "type": "Coding",
                                "title": "Switch Statement",
                                "question": "<p>Write a C# program that uses a switch statement to determine the day of the week.</p><p>Your program should:</p><ul><li>Declare an integer variable for day number (1-7)</li><li>Use <code>switch</code> statement with <code>case</code> labels</li><li>Print the corresponding day name</li><li>Use <code>default</code> for invalid numbers</li><li>Handle the switch logic properly</li></ul>",
                                "hint": "Use switch statement with case and default",
                                "input": "3",
                                "output": "Wednesday"
                            },
                            {
                                "type": "MCQ",
                                "title": "For Loop",
                                "question": "<p>What is the syntax for a for loop in C#?</p><p>Consider this for loop:</p><pre><code>for (int i = 0; i < 5; i++) {<br>  Console.WriteLine(i);<br>}</code></pre>",
                                "hint": "Consider initialization, condition, and increment",
                                "options": [
                                    "for (initialization; condition; increment) - three parts separated by semicolons",
                                    "for (condition) - only condition is required",
                                    "for (initialization, condition, increment) - three parts separated by commas",
                                    "for (start; end; step) - start, end, and step values"
                                ],
                                "correct_answer": 0
                            },
                            {
                                "type": "Coding",
                                "title": "While Loop",
                                "question": "<p>Write a C# program that uses a while loop to count down from a number.</p><p>Your program should:</p><ul><li>Declare an integer variable for the starting number</li><li>Use <code>while</code> loop to count down</li><li>Print each number in the countdown</li><li>Stop when reaching 0</li><li>Handle the loop logic properly</li></ul>",
                                "hint": "Use while loop with decrement operator",
                                "input": "5",
                                "output": "5\n4\n3\n2\n1\n0"
                            },
                            {
                                "type": "MCQ",
                                "title": "Do-While Loop",
                                "question": "<p>What is the difference between while and do-while loops?</p><p>Consider these examples:</p><pre><code>// While loop<br>while (condition) {<br>  // code<br>}<br><br>// Do-while loop<br>do {<br>  // code<br>} while (condition);</code></pre>",
                                "hint": "Consider when the condition is checked",
                                "options": [
                                    "Do-while executes at least once, while may not execute at all",
                                    "While is faster, do-while is slower",
                                    "While is newer, do-while is older",
                                    "There is no difference between them"
                                ],
                                "correct_answer": 0
                            },
                            {
                                "type": "Coding",
                                "title": "Foreach Loop",
                                "question": "<p>Write a C# program that uses a foreach loop to iterate through an array.</p><p>Your program should:</p><ul><li>Declare an integer array</li><li>Initialize the array with values</li><li>Use <code>foreach</code> loop to iterate</li><li>Print each element</li><li>Demonstrate foreach loop usage</li></ul>",
                                "hint": "Use foreach (type variable in collection) syntax",
                                "input": "1 2 3 4 5",
                                "output": "Array elements: 1 2 3 4 5"
                            },
                            {
                                "type": "MCQ",
                                "title": "Break Statement",
                                "question": "<p>What does the <code>break</code> statement do in a loop?</p><p>Consider this example:</p><pre><code>for (int i = 0; i < 10; i++) {<br>  if (i == 5) {<br>    break;<br>  }<br>  Console.WriteLine(i);<br>}</code></pre>",
                                "hint": "Consider loop termination",
                                "options": [
                                    "Skips the current iteration - continues to next iteration",
                                    "Terminates the loop immediately - exits the loop",
                                    "Pauses the loop temporarily - resumes later",
                                    "Reverses the loop direction - goes backwards"
                                ],
                                "correct_answer": 1
                            },
                            {
                                "type": "Coding",
                                "title": "Continue Statement",
                                "question": "<p>Write a C# program that uses continue to skip even numbers in a loop.</p><p>Your program should:</p><ul><li>Use a <code>for</code> loop to iterate from 1 to 10</li><li>Use <code>continue</code> to skip even numbers</li><li>Print only odd numbers</li><li>Handle the logic correctly</li><li>Return the continue statement usage</li></ul>",
                                "hint": "Use continue statement with modulo operator",
                                "input": "10",
                                "output": "1\n3\n5\n7\n9"
                            },
                            {
                                "type": "MCQ",
                                "title": "Ternary Operator",
                                "question": "<p>What is the syntax of the ternary operator in C#?</p><p>Consider this example:</p><pre><code>int result = (a > b) ? a : b;</code></pre>",
                                "hint": "Consider conditional expression syntax",
                                "options": [
                                    "condition ? value1 : value2 - condition, then value, else value",
                                    "condition : value1 ? value2 - condition, else value, then value",
                                    "value1 ? condition : value2 - first value, condition, second value",
                                    "condition ? value1 ? value2 - condition, then value, then value"
                                ],
                                "correct_answer": 0
                            }
                        ]
                    },
                    {
                        "level": "Beginner",
                        "title": "C# Methods",
                        "description": "Learn method declaration, parameters, and usage in C#.",
                        "tags": [
                            "methods",
                            "c-sharp",
                            "basics"
                        ],
                        "tasks": [
                            {
                                "type": "Coding",
                                "title": "Method Definition",
                                "question": "<p>Write a C# method that calculates the sum of two numbers.</p><p>Your method should:</p><ul><li>Have a return type <code>int</code></li><li>Take two <code>int</code> parameters</li><li>Return the sum of the parameters</li><li>Be called from the Main method</li><li>Print the result</li></ul>",
                                "hint": "Use public static int methodName(int param1, int param2) syntax",
                                "input": "5\n3",
                                "output": "Sum: 8"
                            },
                            {
                                "type": "MCQ",
                                "title": "Method Overloading",
                                "question": "<p>What is method overloading in C#?</p><p>Consider these aspects:</p><ul><li>Multiple methods with same name but different parameters</li><li>Different parameter types or number of parameters</li><li>Same return type or different return types</li><li>Compile-time polymorphism</li></ul>",
                                "hint": "Consider multiple methods with same name",
                                "options": [
                                    "Multiple methods with same name but different parameters - compile-time polymorphism",
                                    "Multiple methods with same name and same parameters",
                                    "Multiple methods with different names and same parameters",
                                    "Multiple methods with different names and different parameters"
                                ],
                                "correct_answer": 0
                            },
                            {
                                "type": "Coding",
                                "title": "Method Parameters",
                                "question": "<p>Write C# methods that demonstrate different parameter passing methods.</p><p>Your methods should:</p><ul><li>Pass parameters by value</li><li>Pass parameters by reference using <code>ref</code> keyword</li><li>Pass parameters by reference using <code>out</code> keyword</li><li>Demonstrate the difference between the three</li><li>Return the method results</li></ul>",
                                "hint": "Use ref and out keywords for reference parameters",
                                "input": "10\n20\n30",
                                "output": "Pass by value: 10\nPass by ref: 20\nPass by out: 30"
                            },
                            {
                                "type": "MCQ",
                                "title": "Method Scope",
                                "question": "<p>What is method scope in C#?</p><p>Consider this example:</p><pre><code>public void MyMethod() {<br>  int x = 10;<br>  Console.WriteLine(x);<br>}<br>// Can we access x here?</code></pre>",
                                "hint": "Consider where variables are accessible",
                                "options": [
                                    "Variables declared inside a method are only accessible within that method",
                                    "Variables declared inside a method are accessible everywhere",
                                    "Variables declared inside a method are accessible in other methods",
                                    "Variables declared inside a method are accessible globally"
                                ],
                                "correct_answer": 0
                            },
                            {
                                "type": "Coding",
                                "title": "Recursive Methods",
                                "question": "<p>Write a C# recursive method to calculate factorial.</p><p>Your method should:</p><ul><li>Call itself with a smaller value</li><li>Have a base case to stop recursion</li><li>Calculate factorial of a number</li><li>Handle the recursive logic properly</li><li>Return the factorial result</li></ul>",
                                "hint": "Use base case (n <= 1) and recursive case (n * factorial(n-1))",
                                "input": "5",
                                "output": "Factorial of 5: 120"
                            },
                            {
                                "type": "MCQ",
                                "title": "Static Methods",
                                "question": "<p>What is the purpose of the <code>static</code> keyword in method declarations?</p><p>Consider these effects:</p><ul><li>Method belongs to the class, not to instances</li><li>Can be called without creating an object</li><li>Cannot access non-static members</li><li>Improves performance for utility methods</li></ul>",
                                "hint": "Consider class vs instance methods",
                                "options": [
                                    "Method belongs to the class - can be called without creating an object",
                                    "To make the method run faster",
                                    "To make the method use less memory",
                                    "To make the method global"
                                ],
                                "correct_answer": 0
                            },
                            {
                                "type": "Coding",
                                "title": "Lambda Expressions",
                                "question": "<p>Write C# code that demonstrates lambda expressions.</p><p>Your code should:</p><ul><li>Use lambda expression syntax <code>=></code></li><li>Create simple lambda expressions</li><li>Use lambda expressions with delegates</li><li>Use lambda expressions with LINQ</li><li>Return the lambda expression usage</li></ul>",
                                "hint": "Use => syntax for lambda expressions",
                                "input": "5\n3\n1 2 3 4 5",
                                "output": "Lambda result: 8\nFiltered numbers: 2 4"
                            },
                            {
                                "type": "MCQ",
                                "title": "Extension Methods",
                                "question": "<p>What are extension methods in C#?</p><p>Consider these characteristics:</p><ul><li>Static methods in static classes</li><li>Use <code>this</code> keyword for first parameter</li><li>Extend existing types without modification</li><li>Must be in a static class</li></ul>",
                                "hint": "Consider method extension without inheritance",
                                "options": [
                                    "Static methods that extend existing types - use this keyword",
                                    "Methods that are automatically generated",
                                    "Methods that are inherited from base classes",
                                    "Methods that are overridden from base classes"
                                ],
                                "correct_answer": 0
                            },
                            {
                                "type": "Coding",
                                "title": "Optional Parameters",
                                "question": "<p>Write a C# method that uses optional parameters.</p><p>Your method should:</p><ul><li>Use default parameter values</li><li>Have multiple optional parameters</li><li>Allow calling with different numbers of arguments</li><li>Demonstrate optional parameter usage</li><li>Return the optional parameter usage</li></ul>",
                                "hint": "Use parameter = defaultValue syntax",
                                "input": "Hello\nWorld\n!",
                                "output": "Message: Hello World !\nMessage: Hello World\nMessage: Hello"
                            },
                            {
                                "type": "MCQ",
                                "title": "Method vs Function",
                                "question": "<p>What is the difference between methods and functions in C#?</p><p>Consider these characteristics:</p><ul><li>Methods are members of classes</li><li>Functions are standalone (not in C#)</li><li>Methods can be static or instance</li><li>C# only has methods, not standalone functions</li></ul>",
                                "hint": "Consider C# language design",
                                "options": [
                                    "C# only has methods - functions are not a separate concept",
                                    "Methods are faster, functions are slower",
                                    "Methods are larger, functions are smaller",
                                    "Methods are newer, functions are older"
                                ],
                                "correct_answer": 0
                            }
                        ]
                    }
                ]
            }
        ]
    }
]